"use strict";

exports.__esModule = true;
exports.default = void 0;

require("source-map-support/register");

var _formatLogMessage = require("../utils/format-log-message");

const logger = {
  state: {
    entityCount: 0,
    typeCount: {},
    activityTimers: {}
  },
  reducers: {
    incrementActivityTimer(state, {
      typeName,
      by
    }) {
      const logger = state.activityTimers[typeName];

      if (!logger) {
        return state;
      }

      if (typeof by === `number`) {
        logger.count += by;
        state.entityCount += by;
      }

      logger.activity.setStatus(`fetched ${logger.count}`);
      return state;
    },

    stopActivityTimer(state, {
      typeName
    }) {
      const logger = state.activityTimers[typeName];

      if (logger.count === 0) {
        logger.activity.setStatus(`fetched 0`);
      }

      logger.activity.end();
      return state;
    },

    createActivityTimer(state, {
      typeName,
      reporter,
      pluginOptions
    }) {
      if (state.activityTimers[typeName]) {
        return state;
      }

      const typeActivityTimer = {
        count: 0,
        activity: reporter.activityTimer((0, _formatLogMessage.formatLogMessage)(typeName, {
          useVerboseStyle: pluginOptions.verbose
        }))
      };

      if (pluginOptions.verbose) {
        typeActivityTimer.activity.start();
      }

      state.activityTimers[typeName] = typeActivityTimer;
      return state;
    }

  }
};
var _default = logger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvbG9nZ2VyLmpzIl0sIm5hbWVzIjpbImxvZ2dlciIsInN0YXRlIiwiZW50aXR5Q291bnQiLCJ0eXBlQ291bnQiLCJhY3Rpdml0eVRpbWVycyIsInJlZHVjZXJzIiwiaW5jcmVtZW50QWN0aXZpdHlUaW1lciIsInR5cGVOYW1lIiwiYnkiLCJjb3VudCIsImFjdGl2aXR5Iiwic2V0U3RhdHVzIiwic3RvcEFjdGl2aXR5VGltZXIiLCJlbmQiLCJjcmVhdGVBY3Rpdml0eVRpbWVyIiwicmVwb3J0ZXIiLCJwbHVnaW5PcHRpb25zIiwidHlwZUFjdGl2aXR5VGltZXIiLCJhY3Rpdml0eVRpbWVyIiwidXNlVmVyYm9zZVN0eWxlIiwidmVyYm9zZSIsInN0YXJ0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUEsTUFBTUEsTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxXQUFXLEVBQUUsQ0FEUjtBQUVMQyxJQUFBQSxTQUFTLEVBQUUsRUFGTjtBQUdMQyxJQUFBQSxjQUFjLEVBQUU7QUFIWCxHQURNO0FBT2JDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxzQkFBc0IsQ0FBQ0wsS0FBRCxFQUFRO0FBQUVNLE1BQUFBLFFBQUY7QUFBWUMsTUFBQUE7QUFBWixLQUFSLEVBQTBCO0FBQzlDLFlBQU1SLE1BQU0sR0FBR0MsS0FBSyxDQUFDRyxjQUFOLENBQXFCRyxRQUFyQixDQUFmOztBQUVBLFVBQUksQ0FBQ1AsTUFBTCxFQUFhO0FBQ1gsZUFBT0MsS0FBUDtBQUNEOztBQUVELFVBQUksT0FBT08sRUFBUCxLQUFlLFFBQW5CLEVBQTRCO0FBQzFCUixRQUFBQSxNQUFNLENBQUNTLEtBQVAsSUFBZ0JELEVBQWhCO0FBQ0FQLFFBQUFBLEtBQUssQ0FBQ0MsV0FBTixJQUFxQk0sRUFBckI7QUFDRDs7QUFFRFIsTUFBQUEsTUFBTSxDQUFDVSxRQUFQLENBQWdCQyxTQUFoQixDQUEyQixXQUFVWCxNQUFNLENBQUNTLEtBQU0sRUFBbEQ7QUFFQSxhQUFPUixLQUFQO0FBQ0QsS0FoQk87O0FBa0JSVyxJQUFBQSxpQkFBaUIsQ0FBQ1gsS0FBRCxFQUFRO0FBQUVNLE1BQUFBO0FBQUYsS0FBUixFQUFzQjtBQUNyQyxZQUFNUCxNQUFNLEdBQUdDLEtBQUssQ0FBQ0csY0FBTixDQUFxQkcsUUFBckIsQ0FBZjs7QUFFQSxVQUFJUCxNQUFNLENBQUNTLEtBQVAsS0FBaUIsQ0FBckIsRUFBd0I7QUFDdEJULFFBQUFBLE1BQU0sQ0FBQ1UsUUFBUCxDQUFnQkMsU0FBaEIsQ0FBMkIsV0FBM0I7QUFDRDs7QUFFRFgsTUFBQUEsTUFBTSxDQUFDVSxRQUFQLENBQWdCRyxHQUFoQjtBQUVBLGFBQU9aLEtBQVA7QUFDRCxLQTVCTzs7QUE4QlJhLElBQUFBLG1CQUFtQixDQUFDYixLQUFELEVBQVE7QUFBRU0sTUFBQUEsUUFBRjtBQUFZUSxNQUFBQSxRQUFaO0FBQXNCQyxNQUFBQTtBQUF0QixLQUFSLEVBQStDO0FBQ2hFLFVBQUlmLEtBQUssQ0FBQ0csY0FBTixDQUFxQkcsUUFBckIsQ0FBSixFQUFvQztBQUNsQyxlQUFPTixLQUFQO0FBQ0Q7O0FBRUQsWUFBTWdCLGlCQUFpQixHQUFHO0FBQ3hCUixRQUFBQSxLQUFLLEVBQUUsQ0FEaUI7QUFFeEJDLFFBQUFBLFFBQVEsRUFBRUssUUFBUSxDQUFDRyxhQUFULENBQ1Isd0NBQWlCWCxRQUFqQixFQUEyQjtBQUN6QlksVUFBQUEsZUFBZSxFQUFFSCxhQUFhLENBQUNJO0FBRE4sU0FBM0IsQ0FEUTtBQUZjLE9BQTFCOztBQVNBLFVBQUlKLGFBQWEsQ0FBQ0ksT0FBbEIsRUFBMkI7QUFDekJILFFBQUFBLGlCQUFpQixDQUFDUCxRQUFsQixDQUEyQlcsS0FBM0I7QUFDRDs7QUFFRHBCLE1BQUFBLEtBQUssQ0FBQ0csY0FBTixDQUFxQkcsUUFBckIsSUFBaUNVLGlCQUFqQztBQUVBLGFBQU9oQixLQUFQO0FBQ0Q7O0FBbkRPO0FBUEcsQ0FBZjtlQThEZUQsTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdExvZ01lc3NhZ2UgfSBmcm9tIFwifi91dGlscy9mb3JtYXQtbG9nLW1lc3NhZ2VcIlxuXG5jb25zdCBsb2dnZXIgPSB7XG4gIHN0YXRlOiB7XG4gICAgZW50aXR5Q291bnQ6IDAsXG4gICAgdHlwZUNvdW50OiB7fSxcbiAgICBhY3Rpdml0eVRpbWVyczoge30sXG4gIH0sXG5cbiAgcmVkdWNlcnM6IHtcbiAgICBpbmNyZW1lbnRBY3Rpdml0eVRpbWVyKHN0YXRlLCB7IHR5cGVOYW1lLCBieSB9KSB7XG4gICAgICBjb25zdCBsb2dnZXIgPSBzdGF0ZS5hY3Rpdml0eVRpbWVyc1t0eXBlTmFtZV1cblxuICAgICAgaWYgKCFsb2dnZXIpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYnkgPT09IGBudW1iZXJgKSB7XG4gICAgICAgIGxvZ2dlci5jb3VudCArPSBieVxuICAgICAgICBzdGF0ZS5lbnRpdHlDb3VudCArPSBieVxuICAgICAgfVxuXG4gICAgICBsb2dnZXIuYWN0aXZpdHkuc2V0U3RhdHVzKGBmZXRjaGVkICR7bG9nZ2VyLmNvdW50fWApXG5cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG5cbiAgICBzdG9wQWN0aXZpdHlUaW1lcihzdGF0ZSwgeyB0eXBlTmFtZSB9KSB7XG4gICAgICBjb25zdCBsb2dnZXIgPSBzdGF0ZS5hY3Rpdml0eVRpbWVyc1t0eXBlTmFtZV1cblxuICAgICAgaWYgKGxvZ2dlci5jb3VudCA9PT0gMCkge1xuICAgICAgICBsb2dnZXIuYWN0aXZpdHkuc2V0U3RhdHVzKGBmZXRjaGVkIDBgKVxuICAgICAgfVxuXG4gICAgICBsb2dnZXIuYWN0aXZpdHkuZW5kKClcblxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfSxcblxuICAgIGNyZWF0ZUFjdGl2aXR5VGltZXIoc3RhdGUsIHsgdHlwZU5hbWUsIHJlcG9ydGVyLCBwbHVnaW5PcHRpb25zIH0pIHtcbiAgICAgIGlmIChzdGF0ZS5hY3Rpdml0eVRpbWVyc1t0eXBlTmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHR5cGVBY3Rpdml0eVRpbWVyID0ge1xuICAgICAgICBjb3VudDogMCxcbiAgICAgICAgYWN0aXZpdHk6IHJlcG9ydGVyLmFjdGl2aXR5VGltZXIoXG4gICAgICAgICAgZm9ybWF0TG9nTWVzc2FnZSh0eXBlTmFtZSwge1xuICAgICAgICAgICAgdXNlVmVyYm9zZVN0eWxlOiBwbHVnaW5PcHRpb25zLnZlcmJvc2UsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgIH1cblxuICAgICAgaWYgKHBsdWdpbk9wdGlvbnMudmVyYm9zZSkge1xuICAgICAgICB0eXBlQWN0aXZpdHlUaW1lci5hY3Rpdml0eS5zdGFydCgpXG4gICAgICB9XG5cbiAgICAgIHN0YXRlLmFjdGl2aXR5VGltZXJzW3R5cGVOYW1lXSA9IHR5cGVBY3Rpdml0eVRpbWVyXG5cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvZ2dlclxuIl19