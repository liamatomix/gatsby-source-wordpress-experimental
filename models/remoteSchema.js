"use strict";

exports.__esModule = true;
exports.default = void 0;

require("source-map-support/register");

var _helpers = require("../steps/create-schema-customization/helpers");

const remoteSchema = {
  state: {
    wpUrl: null,
    nodeQueries: {},
    nonNodeQuery: null,
    introspectionData: null,
    schemaWasChanged: null,
    typeMap: null,
    nodeListFilter: field => field.name === `nodes`,
    ingestibles: {
      nodeListRootFields: null,
      nodeInterfaceTypes: null,
      nonNodeRootFields: []
    },
    fetchedTypes: new Map(),
    fieldBlacklist: [`dateGmt`, `isWpGatsby`, `edges`, // these aren't useful without authentication
    `revisions`, `isJwtAuthSecretRevoked`, `isRestricted`, `jwtAuthExpiration`, `jwtAuthToken`, `jwtRefreshToken`, `jwtUserSecret`, `editLock`, `revisionOf`],
    // @todo make this a plugin option
    fieldAliases: {
      parent: `wpParent`,
      children: `wpChildren`,
      internal: `wpInternal`,
      plugin: `wpPlugin`,
      actionOptions: `wpActionOptions`
    }
  },
  reducers: {
    setSchemaWasChanged(state, payload) {
      state.schemaWasChanged = !!payload;
      return state;
    },

    addFieldsToBlackList(state, payload) {
      state.fieldBlacklist = [...state.fieldBlacklist, ...payload];
      return state;
    },

    setState(state, payload) {
      state = Object.assign({}, state, payload);
      return state;
    },

    addFetchedType(state, type) {
      const key = (0, _helpers.findTypeName)(type);

      if (!key) {
        return state;
      }

      type = state.typeMap.get(key); // union types with no member types will cause schema customization errors
      // @todo move this to a better place. This should be excluded before it gets to this point.

      if (type && type.kind === `UNION` && type.possibleTypes.length === 0) {
        return state;
      }

      state.fetchedTypes.set(key, type);
      return state;
    }

  }
};
var _default = remoteSchema;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvcmVtb3RlU2NoZW1hLmpzIl0sIm5hbWVzIjpbInJlbW90ZVNjaGVtYSIsInN0YXRlIiwid3BVcmwiLCJub2RlUXVlcmllcyIsIm5vbk5vZGVRdWVyeSIsImludHJvc3BlY3Rpb25EYXRhIiwic2NoZW1hV2FzQ2hhbmdlZCIsInR5cGVNYXAiLCJub2RlTGlzdEZpbHRlciIsImZpZWxkIiwibmFtZSIsImluZ2VzdGlibGVzIiwibm9kZUxpc3RSb290RmllbGRzIiwibm9kZUludGVyZmFjZVR5cGVzIiwibm9uTm9kZVJvb3RGaWVsZHMiLCJmZXRjaGVkVHlwZXMiLCJNYXAiLCJmaWVsZEJsYWNrbGlzdCIsImZpZWxkQWxpYXNlcyIsInBhcmVudCIsImNoaWxkcmVuIiwiaW50ZXJuYWwiLCJwbHVnaW4iLCJhY3Rpb25PcHRpb25zIiwicmVkdWNlcnMiLCJzZXRTY2hlbWFXYXNDaGFuZ2VkIiwicGF5bG9hZCIsImFkZEZpZWxkc1RvQmxhY2tMaXN0Iiwic2V0U3RhdGUiLCJhZGRGZXRjaGVkVHlwZSIsInR5cGUiLCJrZXkiLCJnZXQiLCJraW5kIiwicG9zc2libGVUeXBlcyIsImxlbmd0aCIsInNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLFlBQVksR0FBRztBQUNuQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLEtBQUssRUFBRSxJQURGO0FBRUxDLElBQUFBLFdBQVcsRUFBRSxFQUZSO0FBR0xDLElBQUFBLFlBQVksRUFBRSxJQUhUO0FBSUxDLElBQUFBLGlCQUFpQixFQUFFLElBSmQ7QUFLTEMsSUFBQUEsZ0JBQWdCLEVBQUUsSUFMYjtBQU1MQyxJQUFBQSxPQUFPLEVBQUUsSUFOSjtBQU9MQyxJQUFBQSxjQUFjLEVBQUdDLEtBQUQsSUFBV0EsS0FBSyxDQUFDQyxJQUFOLEtBQWdCLE9BUHRDO0FBUUxDLElBQUFBLFdBQVcsRUFBRTtBQUNYQyxNQUFBQSxrQkFBa0IsRUFBRSxJQURUO0FBRVhDLE1BQUFBLGtCQUFrQixFQUFFLElBRlQ7QUFHWEMsTUFBQUEsaUJBQWlCLEVBQUU7QUFIUixLQVJSO0FBYUxDLElBQUFBLFlBQVksRUFBRSxJQUFJQyxHQUFKLEVBYlQ7QUFjTEMsSUFBQUEsY0FBYyxFQUFFLENBQ2IsU0FEYSxFQUViLFlBRmEsRUFHYixPQUhhLEVBSWQ7QUFDQyxlQUxhLEVBTWIsd0JBTmEsRUFPYixjQVBhLEVBUWIsbUJBUmEsRUFTYixjQVRhLEVBVWIsaUJBVmEsRUFXYixlQVhhLEVBWWIsVUFaYSxFQWFiLFlBYmEsQ0FkWDtBQTZCTDtBQUNBQyxJQUFBQSxZQUFZLEVBQUU7QUFDWkMsTUFBQUEsTUFBTSxFQUFHLFVBREc7QUFFWkMsTUFBQUEsUUFBUSxFQUFHLFlBRkM7QUFHWkMsTUFBQUEsUUFBUSxFQUFHLFlBSEM7QUFJWkMsTUFBQUEsTUFBTSxFQUFHLFVBSkc7QUFLWkMsTUFBQUEsYUFBYSxFQUFHO0FBTEo7QUE5QlQsR0FEWTtBQXdDbkJDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxtQkFBbUIsQ0FBQ3hCLEtBQUQsRUFBUXlCLE9BQVIsRUFBaUI7QUFDbEN6QixNQUFBQSxLQUFLLENBQUNLLGdCQUFOLEdBQXlCLENBQUMsQ0FBQ29CLE9BQTNCO0FBRUEsYUFBT3pCLEtBQVA7QUFDRCxLQUxPOztBQU9SMEIsSUFBQUEsb0JBQW9CLENBQUMxQixLQUFELEVBQVF5QixPQUFSLEVBQWlCO0FBQ25DekIsTUFBQUEsS0FBSyxDQUFDZ0IsY0FBTixHQUF1QixDQUFDLEdBQUdoQixLQUFLLENBQUNnQixjQUFWLEVBQTBCLEdBQUdTLE9BQTdCLENBQXZCO0FBQ0EsYUFBT3pCLEtBQVA7QUFDRCxLQVZPOztBQVlSMkIsSUFBQUEsUUFBUSxDQUFDM0IsS0FBRCxFQUFReUIsT0FBUixFQUFpQjtBQUN2QnpCLE1BQUFBLEtBQUsscUJBQ0FBLEtBREEsRUFFQXlCLE9BRkEsQ0FBTDtBQUtBLGFBQU96QixLQUFQO0FBQ0QsS0FuQk87O0FBcUJSNEIsSUFBQUEsY0FBYyxDQUFDNUIsS0FBRCxFQUFRNkIsSUFBUixFQUFjO0FBQzFCLFlBQU1DLEdBQUcsR0FBRywyQkFBYUQsSUFBYixDQUFaOztBQUVBLFVBQUksQ0FBQ0MsR0FBTCxFQUFVO0FBQ1IsZUFBTzlCLEtBQVA7QUFDRDs7QUFFRDZCLE1BQUFBLElBQUksR0FBRzdCLEtBQUssQ0FBQ00sT0FBTixDQUFjeUIsR0FBZCxDQUFrQkQsR0FBbEIsQ0FBUCxDQVAwQixDQVMxQjtBQUNBOztBQUNBLFVBQUlELElBQUksSUFBSUEsSUFBSSxDQUFDRyxJQUFMLEtBQWUsT0FBdkIsSUFBaUNILElBQUksQ0FBQ0ksYUFBTCxDQUFtQkMsTUFBbkIsS0FBOEIsQ0FBbkUsRUFBc0U7QUFDcEUsZUFBT2xDLEtBQVA7QUFDRDs7QUFFREEsTUFBQUEsS0FBSyxDQUFDYyxZQUFOLENBQW1CcUIsR0FBbkIsQ0FBdUJMLEdBQXZCLEVBQTRCRCxJQUE1QjtBQUVBLGFBQU83QixLQUFQO0FBQ0Q7O0FBdkNPO0FBeENTLENBQXJCO2VBbUZlRCxZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmluZFR5cGVOYW1lIH0gZnJvbSBcIn4vc3RlcHMvY3JlYXRlLXNjaGVtYS1jdXN0b21pemF0aW9uL2hlbHBlcnNcIlxuXG5jb25zdCByZW1vdGVTY2hlbWEgPSB7XG4gIHN0YXRlOiB7XG4gICAgd3BVcmw6IG51bGwsXG4gICAgbm9kZVF1ZXJpZXM6IHt9LFxuICAgIG5vbk5vZGVRdWVyeTogbnVsbCxcbiAgICBpbnRyb3NwZWN0aW9uRGF0YTogbnVsbCxcbiAgICBzY2hlbWFXYXNDaGFuZ2VkOiBudWxsLFxuICAgIHR5cGVNYXA6IG51bGwsXG4gICAgbm9kZUxpc3RGaWx0ZXI6IChmaWVsZCkgPT4gZmllbGQubmFtZSA9PT0gYG5vZGVzYCxcbiAgICBpbmdlc3RpYmxlczoge1xuICAgICAgbm9kZUxpc3RSb290RmllbGRzOiBudWxsLFxuICAgICAgbm9kZUludGVyZmFjZVR5cGVzOiBudWxsLFxuICAgICAgbm9uTm9kZVJvb3RGaWVsZHM6IFtdLFxuICAgIH0sXG4gICAgZmV0Y2hlZFR5cGVzOiBuZXcgTWFwKCksXG4gICAgZmllbGRCbGFja2xpc3Q6IFtcbiAgICAgIGBkYXRlR210YCxcbiAgICAgIGBpc1dwR2F0c2J5YCxcbiAgICAgIGBlZGdlc2AsXG4gICAgICAvLyB0aGVzZSBhcmVuJ3QgdXNlZnVsIHdpdGhvdXQgYXV0aGVudGljYXRpb25cbiAgICAgIGByZXZpc2lvbnNgLFxuICAgICAgYGlzSnd0QXV0aFNlY3JldFJldm9rZWRgLFxuICAgICAgYGlzUmVzdHJpY3RlZGAsXG4gICAgICBgand0QXV0aEV4cGlyYXRpb25gLFxuICAgICAgYGp3dEF1dGhUb2tlbmAsXG4gICAgICBgand0UmVmcmVzaFRva2VuYCxcbiAgICAgIGBqd3RVc2VyU2VjcmV0YCxcbiAgICAgIGBlZGl0TG9ja2AsXG4gICAgICBgcmV2aXNpb25PZmAsXG4gICAgXSxcbiAgICAvLyBAdG9kbyBtYWtlIHRoaXMgYSBwbHVnaW4gb3B0aW9uXG4gICAgZmllbGRBbGlhc2VzOiB7XG4gICAgICBwYXJlbnQ6IGB3cFBhcmVudGAsXG4gICAgICBjaGlsZHJlbjogYHdwQ2hpbGRyZW5gLFxuICAgICAgaW50ZXJuYWw6IGB3cEludGVybmFsYCxcbiAgICAgIHBsdWdpbjogYHdwUGx1Z2luYCxcbiAgICAgIGFjdGlvbk9wdGlvbnM6IGB3cEFjdGlvbk9wdGlvbnNgLFxuICAgIH0sXG4gIH0sXG5cbiAgcmVkdWNlcnM6IHtcbiAgICBzZXRTY2hlbWFXYXNDaGFuZ2VkKHN0YXRlLCBwYXlsb2FkKSB7XG4gICAgICBzdGF0ZS5zY2hlbWFXYXNDaGFuZ2VkID0gISFwYXlsb2FkXG5cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG5cbiAgICBhZGRGaWVsZHNUb0JsYWNrTGlzdChzdGF0ZSwgcGF5bG9hZCkge1xuICAgICAgc3RhdGUuZmllbGRCbGFja2xpc3QgPSBbLi4uc3RhdGUuZmllbGRCbGFja2xpc3QsIC4uLnBheWxvYWRdXG4gICAgICByZXR1cm4gc3RhdGVcbiAgICB9LFxuXG4gICAgc2V0U3RhdGUoc3RhdGUsIHBheWxvYWQpIHtcbiAgICAgIHN0YXRlID0ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgLi4ucGF5bG9hZCxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfSxcblxuICAgIGFkZEZldGNoZWRUeXBlKHN0YXRlLCB0eXBlKSB7XG4gICAgICBjb25zdCBrZXkgPSBmaW5kVHlwZU5hbWUodHlwZSlcblxuICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSBzdGF0ZS50eXBlTWFwLmdldChrZXkpXG5cbiAgICAgIC8vIHVuaW9uIHR5cGVzIHdpdGggbm8gbWVtYmVyIHR5cGVzIHdpbGwgY2F1c2Ugc2NoZW1hIGN1c3RvbWl6YXRpb24gZXJyb3JzXG4gICAgICAvLyBAdG9kbyBtb3ZlIHRoaXMgdG8gYSBiZXR0ZXIgcGxhY2UuIFRoaXMgc2hvdWxkIGJlIGV4Y2x1ZGVkIGJlZm9yZSBpdCBnZXRzIHRvIHRoaXMgcG9pbnQuXG4gICAgICBpZiAodHlwZSAmJiB0eXBlLmtpbmQgPT09IGBVTklPTmAgJiYgdHlwZS5wb3NzaWJsZVR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhdGVcbiAgICAgIH1cblxuICAgICAgc3RhdGUuZmV0Y2hlZFR5cGVzLnNldChrZXksIHR5cGUpXG5cbiAgICAgIHJldHVybiBzdGF0ZVxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbW90ZVNjaGVtYVxuIl19