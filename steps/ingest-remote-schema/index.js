"use strict";

exports.__esModule = true;
exports.ingestRemoteSchema = void 0;

require("source-map-support/register");

var _runSteps = require("../../utils/run-steps");

var _formatLogMessage = require("../../utils/format-log-message");

var _diffSchemas = require("./diff-schemas");

var _introspectRemoteSchema = require("./introspect-remote-schema");

var _identifyAndStoreIngestableTypes = require("./identify-and-store-ingestable-types");

var _buildAndStoreIngestibleRootFieldNonNodeQueries = require("./build-and-store-ingestible-root-field-non-node-queries");

var _buildNodeQueries = require("./build-queries-from-introspection/build-node-queries");

var _cacheFetchedTypes = require("./cache-fetched-types");

var _writeQueriesToDisk = require("./write-queries-to-disk");

const ingestRemoteSchema = async (helpers, pluginOptions) => {
  // @todo if this is an inc build or preview, we need quicker logic
  // around determining if the remote schema has changed.
  // for now, we need to do a full check each time
  // Eventually this should happen per-Type
  // if (helpers.traceId === `refresh-createSchemaCustomization`) {
  //   return
  // }
  const activity = helpers.reporter.activityTimer((0, _formatLogMessage.formatLogMessage)(`ingest WPGraphQL schema`));
  activity.start();

  try {
    await (0, _runSteps.runSteps)([_diffSchemas.checkIfSchemaHasChanged, _introspectRemoteSchema.introspectAndStoreRemoteSchema, _identifyAndStoreIngestableTypes.identifyAndStoreIngestableFieldsAndTypes, _buildNodeQueries.buildNodeQueries, _buildAndStoreIngestibleRootFieldNonNodeQueries.buildNonNodeQueries, _cacheFetchedTypes.cacheFetchedTypes, _writeQueriesToDisk.writeQueriesToDisk], helpers, pluginOptions);
  } catch (e) {
    helpers.reporter.panic(e);
  }

  activity.end();
};

exports.ingestRemoteSchema = ingestRemoteSchema;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGVwcy9pbmdlc3QtcmVtb3RlLXNjaGVtYS9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbmdlc3RSZW1vdGVTY2hlbWEiLCJoZWxwZXJzIiwicGx1Z2luT3B0aW9ucyIsImFjdGl2aXR5IiwicmVwb3J0ZXIiLCJhY3Rpdml0eVRpbWVyIiwic3RhcnQiLCJjaGVja0lmU2NoZW1hSGFzQ2hhbmdlZCIsImludHJvc3BlY3RBbmRTdG9yZVJlbW90ZVNjaGVtYSIsImlkZW50aWZ5QW5kU3RvcmVJbmdlc3RhYmxlRmllbGRzQW5kVHlwZXMiLCJidWlsZE5vZGVRdWVyaWVzIiwiYnVpbGROb25Ob2RlUXVlcmllcyIsImNhY2hlRmV0Y2hlZFR5cGVzIiwid3JpdGVRdWVyaWVzVG9EaXNrIiwiZSIsInBhbmljIiwiZW5kIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsa0JBQWtCLEdBQUcsT0FBT0MsT0FBUCxFQUFnQkMsYUFBaEIsS0FBa0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxRQUFNQyxRQUFRLEdBQUdGLE9BQU8sQ0FBQ0csUUFBUixDQUFpQkMsYUFBakIsQ0FDZix3Q0FBa0IseUJBQWxCLENBRGUsQ0FBakI7QUFJQUYsRUFBQUEsUUFBUSxDQUFDRyxLQUFUOztBQUVBLE1BQUk7QUFDRixVQUFNLHdCQUNKLENBQ0VDLG9DQURGLEVBRUVDLHNEQUZGLEVBR0VDLHlFQUhGLEVBSUVDLGtDQUpGLEVBS0VDLG1FQUxGLEVBTUVDLG9DQU5GLEVBT0VDLHNDQVBGLENBREksRUFVSlosT0FWSSxFQVdKQyxhQVhJLENBQU47QUFhRCxHQWRELENBY0UsT0FBT1ksQ0FBUCxFQUFVO0FBQ1ZiLElBQUFBLE9BQU8sQ0FBQ0csUUFBUixDQUFpQlcsS0FBakIsQ0FBdUJELENBQXZCO0FBQ0Q7O0FBRURYLEVBQUFBLFFBQVEsQ0FBQ2EsR0FBVDtBQUNELENBbENEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcnVuU3RlcHMgfSBmcm9tIFwifi91dGlscy9ydW4tc3RlcHNcIlxuaW1wb3J0IHsgZm9ybWF0TG9nTWVzc2FnZSB9IGZyb20gXCJ+L3V0aWxzL2Zvcm1hdC1sb2ctbWVzc2FnZVwiXG5cbmltcG9ydCB7IGNoZWNrSWZTY2hlbWFIYXNDaGFuZ2VkIH0gZnJvbSBcIi4vZGlmZi1zY2hlbWFzXCJcbmltcG9ydCB7IGludHJvc3BlY3RBbmRTdG9yZVJlbW90ZVNjaGVtYSB9IGZyb20gXCIuL2ludHJvc3BlY3QtcmVtb3RlLXNjaGVtYVwiXG5pbXBvcnQgeyBpZGVudGlmeUFuZFN0b3JlSW5nZXN0YWJsZUZpZWxkc0FuZFR5cGVzIH0gZnJvbSBcIi4vaWRlbnRpZnktYW5kLXN0b3JlLWluZ2VzdGFibGUtdHlwZXNcIlxuaW1wb3J0IHsgYnVpbGROb25Ob2RlUXVlcmllcyB9IGZyb20gXCIuL2J1aWxkLWFuZC1zdG9yZS1pbmdlc3RpYmxlLXJvb3QtZmllbGQtbm9uLW5vZGUtcXVlcmllc1wiXG5pbXBvcnQgeyBidWlsZE5vZGVRdWVyaWVzIH0gZnJvbSBcIi4vYnVpbGQtcXVlcmllcy1mcm9tLWludHJvc3BlY3Rpb24vYnVpbGQtbm9kZS1xdWVyaWVzXCJcbmltcG9ydCB7IGNhY2hlRmV0Y2hlZFR5cGVzIH0gZnJvbSBcIi4vY2FjaGUtZmV0Y2hlZC10eXBlc1wiXG5pbXBvcnQgeyB3cml0ZVF1ZXJpZXNUb0Rpc2sgfSBmcm9tIFwiLi93cml0ZS1xdWVyaWVzLXRvLWRpc2tcIlxuXG5jb25zdCBpbmdlc3RSZW1vdGVTY2hlbWEgPSBhc3luYyAoaGVscGVycywgcGx1Z2luT3B0aW9ucykgPT4ge1xuICAvLyBAdG9kbyBpZiB0aGlzIGlzIGFuIGluYyBidWlsZCBvciBwcmV2aWV3LCB3ZSBuZWVkIHF1aWNrZXIgbG9naWNcbiAgLy8gYXJvdW5kIGRldGVybWluaW5nIGlmIHRoZSByZW1vdGUgc2NoZW1hIGhhcyBjaGFuZ2VkLlxuICAvLyBmb3Igbm93LCB3ZSBuZWVkIHRvIGRvIGEgZnVsbCBjaGVjayBlYWNoIHRpbWVcbiAgLy8gRXZlbnR1YWxseSB0aGlzIHNob3VsZCBoYXBwZW4gcGVyLVR5cGVcbiAgLy8gaWYgKGhlbHBlcnMudHJhY2VJZCA9PT0gYHJlZnJlc2gtY3JlYXRlU2NoZW1hQ3VzdG9taXphdGlvbmApIHtcbiAgLy8gICByZXR1cm5cbiAgLy8gfVxuXG4gIGNvbnN0IGFjdGl2aXR5ID0gaGVscGVycy5yZXBvcnRlci5hY3Rpdml0eVRpbWVyKFxuICAgIGZvcm1hdExvZ01lc3NhZ2UoYGluZ2VzdCBXUEdyYXBoUUwgc2NoZW1hYClcbiAgKVxuXG4gIGFjdGl2aXR5LnN0YXJ0KClcblxuICB0cnkge1xuICAgIGF3YWl0IHJ1blN0ZXBzKFxuICAgICAgW1xuICAgICAgICBjaGVja0lmU2NoZW1hSGFzQ2hhbmdlZCxcbiAgICAgICAgaW50cm9zcGVjdEFuZFN0b3JlUmVtb3RlU2NoZW1hLFxuICAgICAgICBpZGVudGlmeUFuZFN0b3JlSW5nZXN0YWJsZUZpZWxkc0FuZFR5cGVzLFxuICAgICAgICBidWlsZE5vZGVRdWVyaWVzLFxuICAgICAgICBidWlsZE5vbk5vZGVRdWVyaWVzLFxuICAgICAgICBjYWNoZUZldGNoZWRUeXBlcyxcbiAgICAgICAgd3JpdGVRdWVyaWVzVG9EaXNrLFxuICAgICAgXSxcbiAgICAgIGhlbHBlcnMsXG4gICAgICBwbHVnaW5PcHRpb25zXG4gICAgKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGVscGVycy5yZXBvcnRlci5wYW5pYyhlKVxuICB9XG5cbiAgYWN0aXZpdHkuZW5kKClcbn1cblxuZXhwb3J0IHsgaW5nZXN0UmVtb3RlU2NoZW1hIH1cbiJdfQ==