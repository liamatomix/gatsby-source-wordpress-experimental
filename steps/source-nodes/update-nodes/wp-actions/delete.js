"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _chalk = _interopRequireDefault(require("chalk"));

var _formatLogMessage = require("../../../../utils/format-log-message");

var _store = _interopRequireDefault(require("../../../../store"));

var _helpers = require("../../../create-schema-customization/helpers");

var _fetchGraphql = require("../../../../utils/fetch-graphql");

var _helpers2 = require("../../helpers");

var _constants = require("../../../../constants");

const wpActionDELETE = async ({
  helpers,
  // cachedNodeIds,
  wpAction
}) => {
  const {
    reporter,
    actions,
    getNode,
    cache
  } = helpers;

  try {
    let cachedNodeIds = await cache.get(_constants.CREATED_NODE_IDS); // get the node ID from the WPGQL id

    const nodeId = wpAction.referencedNodeGlobalRelayID;
    const node = await getNode(nodeId);
    const {
      typeInfo
    } = (0, _helpers2.getQueryInfoBySingleFieldName)(wpAction.referencedNodeSingularName) || {};

    if (!typeInfo) {
      Object.entries(wpAction).forEach(([key, value]) => reporter.warn(`${key} -> ${value}`));
      reporter.panic((0, _formatLogMessage.formatLogMessage)(`Unable to perform above action. Data may be unsynched. Clear your cache and run the build process again to resync all data.`));
    }

    const typeSettings = (0, _helpers.getTypeSettingsByType)({
      name: typeInfo.nodesTypeName
    });

    if (typeSettings.beforeChangeNode && typeof typeSettings.beforeChangeNode === `function`) {
      const {
        additionalNodeIds
      } = (await typeSettings.beforeChangeNode({
        actionType: `DELETE`,
        remoteNode: node,
        actions,
        helpers,
        typeInfo,
        fetchGraphql: _fetchGraphql.fetchGraphql,
        typeSettings,
        buildTypeName: _helpers.buildTypeName,
        wpStore: _store.default
      })) || {};

      if (additionalNodeIds && additionalNodeIds.length) {
        additionalNodeIds.forEach(id => cachedNodeIds.push(id));
      }
    }

    if (node) {
      await actions.touchNode({
        nodeId
      });
      await actions.deleteNode({
        node
      });
      reporter.log(``);
      reporter.info((0, _formatLogMessage.formatLogMessage)(`${_chalk.default.bold(`deleted ${wpAction.referencedNodeSingularName}`)} ${wpAction.title} (#${wpAction.referencedNodeID})`));
      reporter.log(``);
    } // Remove this from cached node id's so we don't try to touch it


    const validNodeIds = cachedNodeIds.filter(cachedId => cachedId !== nodeId);
    await cache.set(_constants.CREATED_NODE_IDS, validNodeIds); // return validNodeIds
  } catch (e) {
    Object.entries(wpAction).forEach(([key, value]) => {
      reporter.warn(`${key} ${JSON.stringify(value)}`);
    });
    throw Error(e);
  }
};

module.exports = wpActionDELETE;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zdGVwcy9zb3VyY2Utbm9kZXMvdXBkYXRlLW5vZGVzL3dwLWFjdGlvbnMvZGVsZXRlLmpzIl0sIm5hbWVzIjpbIndwQWN0aW9uREVMRVRFIiwiaGVscGVycyIsIndwQWN0aW9uIiwicmVwb3J0ZXIiLCJhY3Rpb25zIiwiZ2V0Tm9kZSIsImNhY2hlIiwiY2FjaGVkTm9kZUlkcyIsImdldCIsIkNSRUFURURfTk9ERV9JRFMiLCJub2RlSWQiLCJyZWZlcmVuY2VkTm9kZUdsb2JhbFJlbGF5SUQiLCJub2RlIiwidHlwZUluZm8iLCJyZWZlcmVuY2VkTm9kZVNpbmd1bGFyTmFtZSIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJ3YXJuIiwicGFuaWMiLCJ0eXBlU2V0dGluZ3MiLCJuYW1lIiwibm9kZXNUeXBlTmFtZSIsImJlZm9yZUNoYW5nZU5vZGUiLCJhZGRpdGlvbmFsTm9kZUlkcyIsImFjdGlvblR5cGUiLCJyZW1vdGVOb2RlIiwiZmV0Y2hHcmFwaHFsIiwiYnVpbGRUeXBlTmFtZSIsIndwU3RvcmUiLCJzdG9yZSIsImxlbmd0aCIsImlkIiwicHVzaCIsInRvdWNoTm9kZSIsImRlbGV0ZU5vZGUiLCJsb2ciLCJpbmZvIiwiY2hhbGsiLCJib2xkIiwidGl0bGUiLCJyZWZlcmVuY2VkTm9kZUlEIiwidmFsaWROb2RlSWRzIiwiZmlsdGVyIiwiY2FjaGVkSWQiLCJzZXQiLCJlIiwiSlNPTiIsInN0cmluZ2lmeSIsIkVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTUEsY0FBYyxHQUFHLE9BQU87QUFDNUJDLEVBQUFBLE9BRDRCO0FBRTVCO0FBQ0FDLEVBQUFBO0FBSDRCLENBQVAsS0FJakI7QUFDSixRQUFNO0FBQUVDLElBQUFBLFFBQUY7QUFBWUMsSUFBQUEsT0FBWjtBQUFxQkMsSUFBQUEsT0FBckI7QUFBOEJDLElBQUFBO0FBQTlCLE1BQXdDTCxPQUE5Qzs7QUFFQSxNQUFJO0FBQ0YsUUFBSU0sYUFBYSxHQUFHLE1BQU1ELEtBQUssQ0FBQ0UsR0FBTixDQUFVQywyQkFBVixDQUExQixDQURFLENBR0Y7O0FBQ0EsVUFBTUMsTUFBTSxHQUFHUixRQUFRLENBQUNTLDJCQUF4QjtBQUVBLFVBQU1DLElBQUksR0FBRyxNQUFNUCxPQUFPLENBQUNLLE1BQUQsQ0FBMUI7QUFFQSxVQUFNO0FBQUVHLE1BQUFBO0FBQUYsUUFDSiw2Q0FBOEJYLFFBQVEsQ0FBQ1ksMEJBQXZDLEtBQXNFLEVBRHhFOztBQUdBLFFBQUksQ0FBQ0QsUUFBTCxFQUFlO0FBQ2JFLE1BQUFBLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZCxRQUFmLEVBQXlCZSxPQUF6QixDQUFpQyxDQUFDLENBQUNDLEdBQUQsRUFBTUMsS0FBTixDQUFELEtBQy9CaEIsUUFBUSxDQUFDaUIsSUFBVCxDQUFlLEdBQUVGLEdBQUksT0FBTUMsS0FBTSxFQUFqQyxDQURGO0FBR0FoQixNQUFBQSxRQUFRLENBQUNrQixLQUFULENBQ0Usd0NBQ0csNkhBREgsQ0FERjtBQUtEOztBQUVELFVBQU1DLFlBQVksR0FBRyxvQ0FBc0I7QUFDekNDLE1BQUFBLElBQUksRUFBRVYsUUFBUSxDQUFDVztBQUQwQixLQUF0QixDQUFyQjs7QUFJQSxRQUNFRixZQUFZLENBQUNHLGdCQUFiLElBQ0EsT0FBT0gsWUFBWSxDQUFDRyxnQkFBcEIsS0FBMEMsVUFGNUMsRUFHRTtBQUNBLFlBQU07QUFBRUMsUUFBQUE7QUFBRixVQUNKLENBQUMsTUFBTUosWUFBWSxDQUFDRyxnQkFBYixDQUE4QjtBQUNuQ0UsUUFBQUEsVUFBVSxFQUFHLFFBRHNCO0FBRW5DQyxRQUFBQSxVQUFVLEVBQUVoQixJQUZ1QjtBQUduQ1IsUUFBQUEsT0FIbUM7QUFJbkNILFFBQUFBLE9BSm1DO0FBS25DWSxRQUFBQSxRQUxtQztBQU1uQ2dCLFFBQUFBLFlBQVksRUFBWkEsMEJBTm1DO0FBT25DUCxRQUFBQSxZQVBtQztBQVFuQ1EsUUFBQUEsYUFBYSxFQUFiQSxzQkFSbUM7QUFTbkNDLFFBQUFBLE9BQU8sRUFBRUM7QUFUMEIsT0FBOUIsQ0FBUCxLQVVPLEVBWFQ7O0FBYUEsVUFBSU4saUJBQWlCLElBQUlBLGlCQUFpQixDQUFDTyxNQUEzQyxFQUFtRDtBQUNqRFAsUUFBQUEsaUJBQWlCLENBQUNULE9BQWxCLENBQTJCaUIsRUFBRCxJQUFRM0IsYUFBYSxDQUFDNEIsSUFBZCxDQUFtQkQsRUFBbkIsQ0FBbEM7QUFDRDtBQUNGOztBQUVELFFBQUl0QixJQUFKLEVBQVU7QUFDUixZQUFNUixPQUFPLENBQUNnQyxTQUFSLENBQWtCO0FBQUUxQixRQUFBQTtBQUFGLE9BQWxCLENBQU47QUFDQSxZQUFNTixPQUFPLENBQUNpQyxVQUFSLENBQW1CO0FBQUV6QixRQUFBQTtBQUFGLE9BQW5CLENBQU47QUFFQVQsTUFBQUEsUUFBUSxDQUFDbUMsR0FBVCxDQUFjLEVBQWQ7QUFDQW5DLE1BQUFBLFFBQVEsQ0FBQ29DLElBQVQsQ0FDRSx3Q0FDRyxHQUFFQyxlQUFNQyxJQUFOLENBQVksV0FBVXZDLFFBQVEsQ0FBQ1ksMEJBQTJCLEVBQTFELENBQTZELElBQzlEWixRQUFRLENBQUN3QyxLQUNWLE1BQUt4QyxRQUFRLENBQUN5QyxnQkFBaUIsR0FIbEMsQ0FERjtBQVFBeEMsTUFBQUEsUUFBUSxDQUFDbUMsR0FBVCxDQUFjLEVBQWQ7QUFDRCxLQTlEQyxDQWdFRjs7O0FBQ0EsVUFBTU0sWUFBWSxHQUFHckMsYUFBYSxDQUFDc0MsTUFBZCxDQUFzQkMsUUFBRCxJQUFjQSxRQUFRLEtBQUtwQyxNQUFoRCxDQUFyQjtBQUVBLFVBQU1KLEtBQUssQ0FBQ3lDLEdBQU4sQ0FBVXRDLDJCQUFWLEVBQTRCbUMsWUFBNUIsQ0FBTixDQW5FRSxDQXFFRjtBQUNELEdBdEVELENBc0VFLE9BQU9JLENBQVAsRUFBVTtBQUNWakMsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLENBQWVkLFFBQWYsRUFBeUJlLE9BQXpCLENBQWlDLENBQUMsQ0FBQ0MsR0FBRCxFQUFNQyxLQUFOLENBQUQsS0FBa0I7QUFDakRoQixNQUFBQSxRQUFRLENBQUNpQixJQUFULENBQWUsR0FBRUYsR0FBSSxJQUFHK0IsSUFBSSxDQUFDQyxTQUFMLENBQWUvQixLQUFmLENBQXNCLEVBQTlDO0FBQ0QsS0FGRDtBQUdBLFVBQU1nQyxLQUFLLENBQUNILENBQUQsQ0FBWDtBQUNEO0FBQ0YsQ0FuRkQ7O0FBcUZBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUJyRCxjQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIlxuXG5pbXBvcnQgeyBmb3JtYXRMb2dNZXNzYWdlIH0gZnJvbSBcIn4vdXRpbHMvZm9ybWF0LWxvZy1tZXNzYWdlXCJcbmltcG9ydCBzdG9yZSBmcm9tIFwifi9zdG9yZVwiXG5pbXBvcnQge1xuICBnZXRUeXBlU2V0dGluZ3NCeVR5cGUsXG4gIGJ1aWxkVHlwZU5hbWUsXG59IGZyb20gXCJ+L3N0ZXBzL2NyZWF0ZS1zY2hlbWEtY3VzdG9taXphdGlvbi9oZWxwZXJzXCJcbmltcG9ydCB7IGZldGNoR3JhcGhxbCB9IGZyb20gXCJ+L3V0aWxzL2ZldGNoLWdyYXBocWxcIlxuaW1wb3J0IHsgZ2V0UXVlcnlJbmZvQnlTaW5nbGVGaWVsZE5hbWUgfSBmcm9tIFwiLi4vLi4vaGVscGVyc1wiXG5pbXBvcnQgeyBDUkVBVEVEX05PREVfSURTIH0gZnJvbSBcIn4vY29uc3RhbnRzXCJcblxuY29uc3Qgd3BBY3Rpb25ERUxFVEUgPSBhc3luYyAoe1xuICBoZWxwZXJzLFxuICAvLyBjYWNoZWROb2RlSWRzLFxuICB3cEFjdGlvbixcbn0pID0+IHtcbiAgY29uc3QgeyByZXBvcnRlciwgYWN0aW9ucywgZ2V0Tm9kZSwgY2FjaGUgfSA9IGhlbHBlcnNcblxuICB0cnkge1xuICAgIGxldCBjYWNoZWROb2RlSWRzID0gYXdhaXQgY2FjaGUuZ2V0KENSRUFURURfTk9ERV9JRFMpXG5cbiAgICAvLyBnZXQgdGhlIG5vZGUgSUQgZnJvbSB0aGUgV1BHUUwgaWRcbiAgICBjb25zdCBub2RlSWQgPSB3cEFjdGlvbi5yZWZlcmVuY2VkTm9kZUdsb2JhbFJlbGF5SURcblxuICAgIGNvbnN0IG5vZGUgPSBhd2FpdCBnZXROb2RlKG5vZGVJZClcblxuICAgIGNvbnN0IHsgdHlwZUluZm8gfSA9XG4gICAgICBnZXRRdWVyeUluZm9CeVNpbmdsZUZpZWxkTmFtZSh3cEFjdGlvbi5yZWZlcmVuY2VkTm9kZVNpbmd1bGFyTmFtZSkgfHwge31cblxuICAgIGlmICghdHlwZUluZm8pIHtcbiAgICAgIE9iamVjdC5lbnRyaWVzKHdwQWN0aW9uKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+XG4gICAgICAgIHJlcG9ydGVyLndhcm4oYCR7a2V5fSAtPiAke3ZhbHVlfWApXG4gICAgICApXG4gICAgICByZXBvcnRlci5wYW5pYyhcbiAgICAgICAgZm9ybWF0TG9nTWVzc2FnZShcbiAgICAgICAgICBgVW5hYmxlIHRvIHBlcmZvcm0gYWJvdmUgYWN0aW9uLiBEYXRhIG1heSBiZSB1bnN5bmNoZWQuIENsZWFyIHlvdXIgY2FjaGUgYW5kIHJ1biB0aGUgYnVpbGQgcHJvY2VzcyBhZ2FpbiB0byByZXN5bmMgYWxsIGRhdGEuYFxuICAgICAgICApXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgdHlwZVNldHRpbmdzID0gZ2V0VHlwZVNldHRpbmdzQnlUeXBlKHtcbiAgICAgIG5hbWU6IHR5cGVJbmZvLm5vZGVzVHlwZU5hbWUsXG4gICAgfSlcblxuICAgIGlmIChcbiAgICAgIHR5cGVTZXR0aW5ncy5iZWZvcmVDaGFuZ2VOb2RlICYmXG4gICAgICB0eXBlb2YgdHlwZVNldHRpbmdzLmJlZm9yZUNoYW5nZU5vZGUgPT09IGBmdW5jdGlvbmBcbiAgICApIHtcbiAgICAgIGNvbnN0IHsgYWRkaXRpb25hbE5vZGVJZHMgfSA9XG4gICAgICAgIChhd2FpdCB0eXBlU2V0dGluZ3MuYmVmb3JlQ2hhbmdlTm9kZSh7XG4gICAgICAgICAgYWN0aW9uVHlwZTogYERFTEVURWAsXG4gICAgICAgICAgcmVtb3RlTm9kZTogbm9kZSxcbiAgICAgICAgICBhY3Rpb25zLFxuICAgICAgICAgIGhlbHBlcnMsXG4gICAgICAgICAgdHlwZUluZm8sXG4gICAgICAgICAgZmV0Y2hHcmFwaHFsLFxuICAgICAgICAgIHR5cGVTZXR0aW5ncyxcbiAgICAgICAgICBidWlsZFR5cGVOYW1lLFxuICAgICAgICAgIHdwU3RvcmU6IHN0b3JlLFxuICAgICAgICB9KSkgfHwge31cblxuICAgICAgaWYgKGFkZGl0aW9uYWxOb2RlSWRzICYmIGFkZGl0aW9uYWxOb2RlSWRzLmxlbmd0aCkge1xuICAgICAgICBhZGRpdGlvbmFsTm9kZUlkcy5mb3JFYWNoKChpZCkgPT4gY2FjaGVkTm9kZUlkcy5wdXNoKGlkKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgYXdhaXQgYWN0aW9ucy50b3VjaE5vZGUoeyBub2RlSWQgfSlcbiAgICAgIGF3YWl0IGFjdGlvbnMuZGVsZXRlTm9kZSh7IG5vZGUgfSlcblxuICAgICAgcmVwb3J0ZXIubG9nKGBgKVxuICAgICAgcmVwb3J0ZXIuaW5mbyhcbiAgICAgICAgZm9ybWF0TG9nTWVzc2FnZShcbiAgICAgICAgICBgJHtjaGFsay5ib2xkKGBkZWxldGVkICR7d3BBY3Rpb24ucmVmZXJlbmNlZE5vZGVTaW5ndWxhck5hbWV9YCl9ICR7XG4gICAgICAgICAgICB3cEFjdGlvbi50aXRsZVxuICAgICAgICAgIH0gKCMke3dwQWN0aW9uLnJlZmVyZW5jZWROb2RlSUR9KWBcbiAgICAgICAgKVxuICAgICAgKVxuXG4gICAgICByZXBvcnRlci5sb2coYGApXG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIHRoaXMgZnJvbSBjYWNoZWQgbm9kZSBpZCdzIHNvIHdlIGRvbid0IHRyeSB0byB0b3VjaCBpdFxuICAgIGNvbnN0IHZhbGlkTm9kZUlkcyA9IGNhY2hlZE5vZGVJZHMuZmlsdGVyKChjYWNoZWRJZCkgPT4gY2FjaGVkSWQgIT09IG5vZGVJZClcblxuICAgIGF3YWl0IGNhY2hlLnNldChDUkVBVEVEX05PREVfSURTLCB2YWxpZE5vZGVJZHMpXG5cbiAgICAvLyByZXR1cm4gdmFsaWROb2RlSWRzXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBPYmplY3QuZW50cmllcyh3cEFjdGlvbikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICByZXBvcnRlci53YXJuKGAke2tleX0gJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YClcbiAgICB9KVxuICAgIHRocm93IEVycm9yKGUpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3cEFjdGlvbkRFTEVURVxuIl19